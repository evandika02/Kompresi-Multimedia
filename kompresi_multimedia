import tkinter as tk
from tkinter import filedialog, messagebox
import zipfile
import os
import sqlite3

def lzw_compress(uncompressed):
    """Kompresi string menjadi daftar simbol output."""
    dict_size = 256
    dictionary = {chr(i): i for i in range(dict_size)}
    w = ""
    result = []
    for c in uncompressed:
        wc = w + c
        if wc in dictionary:
            w = wc
        else:
            result.append(dictionary[w])
            dictionary[wc] = dict_size
            dict_size += 1
            w = c

    if w:
        result.append(dictionary[w])
    return result

def lzw_decompress(compressed):
    """Dekompresi daftar output ke string."""
    dict_size = 256
    dictionary = {i: chr(i) for i in range(dict_size)}
    result = []
    w = chr(compressed[0])
    result.append(w)
    for k in compressed[1:]:
        if k in dictionary:
            entry = dictionary[k]
        elif k == dict_size:
            entry = w + w[0]
        else:
            raise ValueError('Kode terkompresi salah: %s' % k)
        result.append(entry)
        dictionary[dict_size] = w + entry[0]
        dict_size += 1
        w = entry
    return "".join(result)

class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Kompresi Media")
        self.geometry("400x300")

        # Menu
        self.menu = tk.Menu(self)
        self.config(menu=self.menu)

        self.file_menu = tk.Menu(self.menu, tearoff=0)
        self.file_menu.add_command(label="Open", command=self.open_file)
        self.file_menu.add_separator()
        self.file_menu.add_command(label="Exit", command=self.quit)
        self.menu.add_cascade(label="File", menu=self.file_menu)

        # Label dan Entry untuk menampilkan file yang dipilih
        self.file_label = tk.Label(self, text="File yang dipilih:")
        self.file_label.pack()

        self.file_entry = tk.Entry(self, width=50)
        self.file_entry.pack()

        # Tombol kompresi
        self.compress_button = tk.Button(self, text="Kompresi", command=self.compress_file)
        self.compress_button.pack()

        # Tombol untuk menampilkan isi database
        self.show_button = tk.Button(self, text="Show Database Contents", command=self.show_database_contents)
        self.show_button.pack()

        # Koneksi database
        self.conn = sqlite3.connect('multimedia.db')
        self.create_table()

    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS multimedia (
            id INTEGER PRIMARY KEY,
            file_name TEXT,
            file_path TEXT,
            file_type TEXT,
            original_size INTEGER,
            compressed_size INTEGER
        )
        ''')
        self.conn.commit()

    def save_file_metadata(self, file_name, file_path, file_type, original_size, compressed_size):
        cursor = self.conn.cursor()
        cursor.execute('''
        INSERT INTO multimedia (file_name, file_path, file_type, original_size, compressed_size)
        VALUES (?, ?, ?, ?, ?)
        ''', (file_name, file_path, file_type, original_size, compressed_size))
        self.conn.commit()

    def open_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            self.file_entry.delete(0, tk.END)
            self.file_entry.insert(0, file_path)

    def compress_file(self):
        file_path = self.file_entry.get()
        if file_path:
            try:
                file_extension = file_path.split('.')[-1].lower()
                with open(file_path, "rb") as f:
                    data = f.read()
                
                compressed_data = lzw_compress(data.decode('latin1'))
                compressed_data_bytes = bytearray()
                for num in compressed_data:
                    compressed_data_bytes.extend(num.to_bytes((num.bit_length() + 7) // 8, byteorder='big'))

                compressed_file_path = file_path[:-len(file_extension)-1] + "_compressed.zip"
                with zipfile.ZipFile(compressed_file_path, 'w') as zipf:
                    zipf.writestr(os.path.basename(file_path), compressed_data_bytes)

                # Simpan metadata ke database
                self.save_file_metadata(
                    file_name=os.path.basename(file_path),
                    file_path=compressed_file_path,
                    file_type=file_extension,
                    original_size=len(data),
                    compressed_size=len(compressed_data_bytes)
                )

                messagebox.showinfo("Success", f"File berhasil dikompresi menjadi {compressed_file_path}")
            except Exception as e:
                messagebox.showerror("Error", f"Gagal mengompresi file: {str(e)}")
        else:
            messagebox.showwarning("Warning", "Harap pilih file terlebih dahulu")

    def show_database_contents(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM multimedia')
        records = cursor.fetchall()
        
        # Membuat jendela baru untuk menampilkan isi database
        db_window = tk.Toplevel(self)
        db_window.title("Database Contents")
        db_window.geometry("600x400")

        # Menampilkan isi database dalam bentuk label
        text_widget = tk.Text(db_window)
        text_widget.pack(expand=True, fill='both')
        for record in records:
            text_widget.insert(tk.END, f"{record}\n")

    def on_closing(self):
        self.conn.close()
        self.destroy()

if __name__ == "__main__":
    app = Application()
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    app.mainloop()
